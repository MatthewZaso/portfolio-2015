/**
*
* Grid
*
**/

//
// Variables & Maps
// --------------------------------------------------
//

// This is incorrect. It should be replaced with
// `padding-at-max-grid-width`.
$grid-max-container-padding: (strip-units(map-get($grid-container-padding, "lg")) / 100) * map-get($breakpoints, "lg");

// 0.035
$_grid-padding-pct: (strip-units(map-get($grid-container-padding, "xs")) / 100);

// Size of the window when the grid row has hit max-width.
$viewport-at-max-grid-width: round($grid-max-width / (1 - $_grid-padding-pct * 2));

// Padding at the max grid width.
$padding-at-max-grid-width: round($_grid-padding-pct * $viewport-at-max-grid-width);

$media-object-margin: $grid-gutter-width;



// Functions
// --------------------------------------------------
//
@function get-grid-selectors() {
  $selector: ();
  @for $i from 1 through $grid-columns {
    $cols: "";
    @each $size in $grid-sizes {
      $cols: $cols + ".#{$grid-prefix}-#{$size}-#{$i}, ";
    }
    $selector: append($selector, unquote($cols), comma);
  }
  @return $selector;
}

@function get-grid-class-selectors($class) {
  $selector: ();
  @for $i from 1 through $grid-columns {
    $selector: append($selector, unquote('.#{$grid-prefix}-#{$class}-#{$i}'), comma);
  }
  @return $selector;
}

// The width of the grid when it hits its maximum width. The .container will
// continue to grow, but the .row will become centered within the container.
@mixin at-max-grid-width {
  @media (min-width: $viewport-at-max-grid-width) {
    @content;
  }
}

// Media query for before the grid reaches its maximum width.
@mixin before-max-grid-width {
  @media (max-width: $viewport-at-max-grid-width - 1px) {
    @content;
  }
}

@mixin make-grid-columns() {
  $selector: get-grid-selectors();

  #{$selector} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

@mixin float-grid-columns($class) {
  $selector: get-grid-class-selectors($class);

  #{$selector} {
    float: left;
  }
}

@mixin calc-grid-column($index, $columns, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .#{$grid-prefix}-#{$class}-#{$index} {
      width: percentage(($index / $columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .#{$grid-prefix}-#{$class}-push-#{$index} {
      left: percentage(($index / $columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .#{$grid-prefix}-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .#{$grid-prefix}-#{$class}-pull-#{$index} {
      right: percentage(($index / $columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .#{$grid-prefix}-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .#{$grid-prefix}-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $columns));
    }
  }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $columns, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class, $columns: $grid-columns) {
  // Add float:left to all grid selectors for this class.
  @include float-grid-columns($class);
  @include grid-ratios($class);

  @include loop-grid-columns($columns, $class, width);
  @include loop-grid-columns($columns, $class, pull);
  @include loop-grid-columns($columns, $class, push);
  @include loop-grid-columns($columns, $class, offset);
}

.#{$grid-container} {
  padding-left: map-get($grid-container-padding, "xs");
  padding-right: map-get($grid-container-padding, "xs");

  @include clearfix();
}

// .row
.#{$grid-row} {
  margin-left: auto;
  margin-right: auto;
  max-width: $grid-max-width;
  @include clearfix();
}

// Create basic styles for every grid class.
@include make-grid-columns();

// Only the extra small grid takes effect at all times. Mobile first!
@include make-grid(xs, 6);

// First breakpoint, add the next grid.
@include breakpoint(lg) {
  // Generate new grid classes that apply only at this breakpoint and higher.
  @include make-grid(lg);
  .#{$grid-container} {
    padding-left: $grid-max-container-padding;
    padding-right: $grid-max-container-padding;
  }

  .#{$grid-margin-bottom-name} {
    margin-bottom: $grid-max-container-padding;
  }
}
